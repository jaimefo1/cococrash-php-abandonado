unit U_MODULO;

INTERFACE

uses CRT,U_TIPOS,U_UTIL;

procedure INI_PIEZA (var P: T_PIEZA);
procedure INI_MODULO(var MODULO: T_MODULO);
procedure PON_PIEZA (P:T_PIEZA; F,C:byte; HUECA : boolean; CAR: char);
procedure ARISTA_ESPEJO ( var A : T_ARISTA);
procedure INVERTIR_PIEZA ( var P: T_PIEZA);
procedure ROTAR_90 (var P: T_PIEZA);
procedure PIEZA_GIRADA ( var P: T_PIEZA; POS : byte);
procedure ACT_ESQ_PIEZA( var P: T_PIEZA);
procedure SUMA_ARISTAS (var A1 : T_ARISTA; A2:T_ARISTA);
Function TEST_ARISTA (A1,A2 : T_ARISTA):boolean;
Function TEST_PIEZA ( PF,PC:T_PIEZA):boolean;
Function ARISTA_IGUAL (A1,A2 : T_ARISTA):boolean;
function ARISTA_OK ( A : T_ARISTA):boolean;

IMPLEMENTATION

procedure INI_PIEZA (var P: T_PIEZA);
   var
      A, i : byte;
   begin
        for A :=1 to 4 do
            for i:= 1 to 5 do
                P[A][i] := 0
   end;

procedure INI_MODULO(var MODULO: T_MODULO);
  { inicializa un modulo o juego de piezas }
   var
      p,a,i:byte;
   begin
        for p :=1 to 6 do
            INI_PIEZA( MODULO[p] )
   end;

procedure PON_ARISTA ( P:T_PIEZA; NA:byte; F,C: byte; CAR:char);
   var
      i : byte;
   begin
        for i := 1 to 5 do
            begin
                 gotoxy(C,F);
                 if P[NA][i] = 1 then write( CAR ) else write(' ') ;
                 MUEVE(F,C,NA,1)
            end
   end;

procedure PON_CENTRO (F,C : byte;CEN : string);
   begin
        gotoxy(C+1,F+1); write(CEN);
        gotoxy(C+1,F+2); write(CEN);
        gotoxy(C+1,F+3); write(CEN)
   end;


procedure PON_PIEZA (P:T_PIEZA; F,C:byte; HUECA : boolean; CAR: char);
         { pone una pieza real o imaginaria (cara de cubo) en pantalla }
   var
       NA:byte;
   begin
       if not HUECA then
          PON_CENTRO (F,C,CAR+CAR+CAR)
         else
          PON_CENTRO (F,C,'   ');
       for NA:= 1 to 4 do
           begin
                PON_ARISTA (P,NA,F,C,CAR);
                MUEVE (F,C,NA,4)
           end;
   end;

procedure ARISTA_ESPEJO ( var A : T_ARISTA);
   var
      i : byte;
      A_AUX : T_ARISTA;
   begin
      for i:=1 to 5 do A_AUX[i] := A[6-i];
      A := A_AUX
   end;
procedure INVERTIR_PIEZA ( var P: T_PIEZA);
   var
      A_AUX: T_ARISTA;
   begin
                ARISTA_ESPEJO(P[1]);
                ARISTA_ESPEJO(P[3]);
                ARISTA_ESPEJO(P[4]);
                ARISTA_ESPEJO(P[2]);
                A_AUX    := P[4];
                P[4]     := P[2];
                P[2]     := A_AUX
   end;
procedure ROTAR_90 (var P: T_PIEZA);
   var
      A_AUX: T_ARISTA;
   begin
        A_AUX := P[4];
        P[4]  := P[3];
        P[3]  := P[2];
        P[2]  := P[1];
        P[1]  := A_AUX
   end;

procedure PIEZA_GIRADA ( var P: T_PIEZA; POS : byte);
 { devuelve la pieza P girada POS posiciones }
   begin
        if POS > 4 then
           begin
                INVERTIR_PIEZA (P);
                POS := POS - 4
           end;
        while POS > 1 do
              begin
                   ROTAR_90 (P);
                   POS := POS - 1
              end;
   end;

procedure ACT_ESQUINA ( var P:T_PIEZA;X1,Y1,X2,Y2 : byte);
   var
      S : byte;
   begin
        S:= P[X1][Y1] + P[X2,Y2];
        if S>1 then S:= 1;
        P[X1][Y1] := S;
        P[X2][Y2] := S
   end;

procedure ACT_ESQ_PIEZA( var P: T_PIEZA);
   begin
      ACT_ESQUINA (P,4,5,1,1);
      ACT_ESQUINA (P,1,5,2,1);
      ACT_ESQUINA (P,2,5,3,1);
      ACT_ESQUINA (P,3,5,4,1);
  end;

procedure SUMA_ARISTAS (var A1 : T_ARISTA; A2:T_ARISTA);
   var
      i : byte;
   begin
      for i:= 1 to 5 do
          begin
                A1[i] := A1[i] + A2[i];
                if A1[i]>1 then A1[i] := 1
         end;
   end;

function ARISTA_OK ( A : T_ARISTA):boolean;
   var
      i : byte;
   begin
      ARISTA_OK := (A[2]+A[3]+A[4]) <> 3;
{
      for i:= 2 to 4 do
          if A[i] = 0 then ARISTA_OK := false}
   end;

Function ARISTA_IGUAL (A1,A2 : T_ARISTA):boolean;
 { comprueba dos aristas son IGUALES}
    var
       i : byte;
    begin
         ARISTA_IGUAL := true;
         for i:= 1 to 5 do
             if A1[i] <> A2[i]  then ARISTA_IGUAL := false
    end;

Function TEST_ARISTA (A1,A2 : T_ARISTA):boolean;
 { comprueba si encajan dos aristas }
    var
       i : byte;
    begin
         TEST_ARISTA := true;
         for i:= 1 to 5 do
             if A1[i] + A2[i] = 2 then TEST_ARISTA := false;
          if A2[2]+A2[3]+A2[4] > 0 then
             for i:= 2 to 4 do
                 if A1[i] + A2[i] = 0 then TEST_ARISTA := false;
    end;


Function TEST_PIEZA ( PF,PC:T_PIEZA):boolean;
 { comprueba si encaja una pieza de figura con una pieza de cubo }

   var
      NA : byte;
      TEST_AUX : boolean;
   begin
        TEST_AUX := true;
        NA := 1;
        while (NA < 5) and (TEST_AUX) do
              begin
                   TEST_AUX := TEST_ARISTA(PF[NA],PC[NA]);
                   NA := NA + 1
              end;
        TEST_PIEZA := TEST_AUX
   end;
BEGIN
END.